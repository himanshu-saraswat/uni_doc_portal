"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var fs = require("fs");

var _require = require("path"),
    extname = _require.extname,
    resolve = _require.resolve;

var readdir = require("recursive-readdir");

var normalizePath = require("normalize-path");

var _require2 = require("./constants"),
    OPTION_DEFAULT_LINK_TEXT = _require2.OPTION_DEFAULT_LINK_TEXT,
    OPTION_DEFAULT_HTML = _require2.OPTION_DEFAULT_HTML,
    OPTION_DEFAULT_REDIRECT_TEMPLATE_PATH = _require2.OPTION_DEFAULT_REDIRECT_TEMPLATE_PATH,
    OPTION_DEFAULT_INCLUDE_MATCHING_CSS = _require2.OPTION_DEFAULT_INCLUDE_MATCHING_CSS;

exports.createPages =
/*#__PURE__*/
function () {
  var _ref2 = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(_ref, _temp) {
    var actions, reporter, _ref3, _ref3$directory, directory, _ref3$externals, externals, _ref3$html, html, _ref3$redirectTemplat, redirectTemplate, _ref3$includeMatching, includeMatchingCSS, createPage, files;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            actions = _ref.actions, reporter = _ref.reporter;
            _ref3 = _temp === void 0 ? {} : _temp, _ref3$directory = _ref3.directory, directory = _ref3$directory === void 0 ? OPTION_DEFAULT_LINK_TEXT : _ref3$directory, _ref3$externals = _ref3.externals, externals = _ref3$externals === void 0 ? [] : _ref3$externals, _ref3$html = _ref3.html, html = _ref3$html === void 0 ? OPTION_DEFAULT_HTML : _ref3$html, _ref3$redirectTemplat = _ref3.redirectTemplate, redirectTemplate = _ref3$redirectTemplat === void 0 ? OPTION_DEFAULT_REDIRECT_TEMPLATE_PATH : _ref3$redirectTemplat, _ref3$includeMatching = _ref3.includeMatchingCSS, includeMatchingCSS = _ref3$includeMatching === void 0 ? OPTION_DEFAULT_INCLUDE_MATCHING_CSS : _ref3$includeMatching;

            if (!directory.endsWith("/")) {
              directory += "/";
            }

            createPage = actions.createPage;

            if (!fs.existsSync(directory)) {
              reporter.panic("Invalid REPL directory specified: \"" + directory + "\"");
            }

            if (!fs.existsSync(redirectTemplate)) {
              reporter.panic("Invalid REPL redirectTemplate specified: \"" + redirectTemplate + "\"");
            }

            _context.prev = 6;
            _context.next = 9;
            return readdir(directory);

          case 9:
            files = _context.sent;

            if (!(files.length === 0)) {
              _context.next = 13;
              break;
            }

            console.warn("Specified REPL directory \"" + directory + "\" contains no files");
            return _context.abrupt("return");

          case 13:
            files.forEach(function (file) {
              if (extname(file) === ".js" || extname(file) === ".jsx") {
                var slug = file.substring(0, file.length - extname(file).length).replace(new RegExp("^" + directory), "redirect-to-codepen/");
                var code = fs.readFileSync(file, "utf8");
                var css;

                if (includeMatchingCSS === true) {
                  try {
                    css = fs.readFileSync(file.replace(extname(file), ".css"), "utf8");
                  } catch (err) {
                    // If the file doesn't exist, we gracefully ignore the error
                    if (err.code !== "ENOENT") {
                      throw err;
                    }
                  }
                } // Codepen configuration.
                // https://blog.codepen.io/documentation/api/prefill/


                var action = "https://codepen.io/pen/define";
                var payload = JSON.stringify({
                  editors: "0010",
                  html: html,
                  js: code,
                  js_external: externals.join(";"),
                  js_pre_processor: "babel",
                  layout: "left",
                  css: css
                });
                createPage({
                  path: slug,
                  // Normalize the path so tests pass on Linux + Windows
                  component: normalizePath(resolve(redirectTemplate)),
                  context: {
                    action: action,
                    payload: payload
                  }
                });
              }
            });
            _context.next = 19;
            break;

          case 16:
            _context.prev = 16;
            _context.t0 = _context["catch"](6);
            reporter.panic("\n      Error in gatsby-remark-code-repls plugin: cannot read directory " + directory + ".\n      More details can be found in the error reporting below.\n      ", _context.t0);

          case 19:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[6, 16]]);
  }));

  return function (_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}();